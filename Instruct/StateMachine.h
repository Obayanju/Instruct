#pragma once
#include "Token.h"

enum MachineState {
	START_STATE, DIVIDE_STATE, TIMES_STATE, MINUS_STATE, COMMENT_STATE,
	BLOCKCOMMENT_STATE, BLOCKCOMMENT_END_STATE, IDENTIFIER_STATE, 
	INTEGER_STATE, CANTMOVE_STATE, PLUS_STATE, LPAREN_STATE, 
	RPAREN_STATE, INSERTION_STATE, LESS_STATE, LESS_EQUAL_STATE,
	GREATER_STATE, GREATEREQUAL_STATE, SEMICOLON_STATE, EQUAL_STATE, 
	ASSIGNMENT_STATE, RCURLY_STATE, LESSEQUAL_STATE, EXCLAMATION_STATE,
	LCURLY_STATE, HALF_AND_STATE,AND_STATE, OR_STATE, HALF_OR_STATE, NOTEQUAL_STATE,
	EOF_STATE, LAST_STATE
};
enum CharacterType {
	LETTER_CHAR, TIMES_CHAR, DIVIDE_CHAR, MINUS_CHAR,
	LESSEQUAL_CHAR, GREATER_CHAR, GREATEREQUAL_CHAR,
	DIGIT_CHAR, WHITESPACE_CHAR, PLUS_CHAR, BAD_CHAR, NEWLINE_CHAR,
	EQUAL_CHAR, SEMICOLON_CHAR, LPAREN_CHAR, RPAREN_CHAR,  RCURLY_CHAR,
	LCURLY_CHAR, LESS_CHAR, AND_CHAR, OR_CHAR, EOF_CHAR, LAST_CHAR
};class StateMachineClass
{
public:
	StateMachineClass();
	MachineState UpdateState(char currentCharacter, TokenType&
		correspondingTokenType);
private:
	MachineState mCurrentState;
	// The matrix of legal moves:
	MachineState mLegalMoves[LAST_STATE][LAST_CHAR];
	// Which end-machine-states correspond to which token types.
	// (non end states correspond to the BAD_TOKEN token type)
	TokenType mCorrespondingTokenTypes[LAST_STATE];
};
