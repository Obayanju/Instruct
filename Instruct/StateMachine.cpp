#include "StateMachine.h"

StateMachineClass::StateMachineClass()
{
	for (int i = 0; i < LAST_STATE; i++)
	{
		for (int j = 0; j < LAST_CHAR; j++)
		{
			mLegalMoves[i][j] = CANTMOVE_STATE;
		}
	}
	mCurrentState = START_STATE;
	mLegalMoves[START_STATE][RCURLY_CHAR] = RCURLY_STATE;
	mLegalMoves[START_STATE][LCURLY_CHAR] = LCURLY_STATE;
	mLegalMoves[START_STATE][DIGIT_CHAR] = INTEGER_STATE;
	mLegalMoves[INTEGER_STATE][DIGIT_CHAR] = INTEGER_STATE;
	mLegalMoves[INTEGER_STATE][LESS_CHAR] = CANTMOVE_STATE;
	mLegalMoves[START_STATE][LETTER_CHAR] = IDENTIFIER_STATE;
	mLegalMoves[LESS_STATE][LESS_CHAR] = INSERTION_STATE;
	mLegalMoves[LESS_STATE][EQUAL_CHAR] = LESS_EQUAL_STATE;
	mLegalMoves[IDENTIFIER_STATE][LETTER_CHAR] = IDENTIFIER_STATE;
	mLegalMoves[INTEGER_STATE][DIGIT_CHAR] = INTEGER_STATE;
	mLegalMoves[START_STATE][LPAREN_CHAR] = LPAREN_STATE;
	mLegalMoves[START_STATE][RPAREN_CHAR] = RPAREN_STATE;
	mLegalMoves[START_STATE][PLUS_CHAR] = PLUS_STATE;
	mLegalMoves[START_STATE][DIVIDE_CHAR] = DIVIDE_STATE;
	mLegalMoves[START_STATE][MINUS_CHAR] = MINUS_STATE;
	mLegalMoves[START_STATE][TIMES_CHAR] = TIMES_STATE;
	mLegalMoves[START_STATE][LESS_CHAR] = LESS_STATE;
	mLegalMoves[START_STATE][GREATEREQUAL_CHAR] = GREATEREQUAL_STATE;
	mLegalMoves[START_STATE][LESSEQUAL_CHAR] = LESSEQUAL_STATE;
	mLegalMoves[START_STATE][WHITESPACE_CHAR] = START_STATE;
	mLegalMoves[START_STATE][SEMICOLON_CHAR] = SEMICOLON_STATE;
	mLegalMoves[START_STATE][EQUAL_CHAR] = ASSIGNMENT_STATE;
	mLegalMoves[START_STATE][NEWLINE_CHAR] = START_STATE;
	mLegalMoves[START_STATE][AND_CHAR] = HALF_AND_STATE;
	mLegalMoves[START_STATE][OR_CHAR] = HALF_OR_STATE;
	
	mLegalMoves[DIVIDE_STATE][TIMES_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LETTER_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][DIGIT_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][WHITESPACE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LESS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][EQUAL_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][PLUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][DIVIDE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][SEMICOLON_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][RPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][LCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][RCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][NEWLINE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][AND_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_STATE][OR_CHAR] = BLOCKCOMMENT_STATE;

	mLegalMoves[BLOCKCOMMENT_STATE][TIMES_CHAR] = BLOCKCOMMENT_END_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][LETTER_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][DIGIT_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][WHITESPACE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][LESS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][EQUAL_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][PLUS_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][SEMICOLON_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][LPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][RPAREN_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][LCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][RCURLY_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][NEWLINE_CHAR] = BLOCKCOMMENT_STATE;
	mLegalMoves[BLOCKCOMMENT_END_STATE][DIVIDE_CHAR] = START_STATE;


	mLegalMoves[DIVIDE_STATE][DIVIDE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LETTER_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][DIGIT_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][WHITESPACE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LESS_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][EQUAL_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][PLUS_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][DIVIDE_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][SEMICOLON_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LPAREN_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][RPAREN_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][LCURLY_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][RCURLY_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][TIMES_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][NEWLINE_CHAR] = START_STATE;
	mLegalMoves[COMMENT_STATE][AND_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][OR_CHAR] = COMMENT_STATE;
	mLegalMoves[COMMENT_STATE][EOF_CHAR] = EOF_STATE;

	mLegalMoves[ASSIGNMENT_STATE][EQUAL_CHAR] = EQUAL_STATE;
	mLegalMoves[LESS_STATE][EQUAL_CHAR] = LESSEQUAL_STATE;
	mLegalMoves[GREATEREQUAL_STATE][EQUAL_CHAR] = GREATEREQUAL_STATE;
	mLegalMoves[EXCLAMATION_STATE][EQUAL_CHAR] = NOTEQUAL_STATE;
	mLegalMoves[HALF_AND_STATE][AND_CHAR] = AND_STATE;
	mLegalMoves[HALF_OR_STATE][OR_CHAR] = OR_STATE;


	mLegalMoves[START_STATE][EOF_CHAR] = EOF_STATE;
	for (int i = 0; i < LAST_STATE; i++)
	{
		mCorrespondingTokenTypes[i] = BAD_TOKEN;
	}
	mCorrespondingTokenTypes[LESS_STATE] = LESS_TOKEN;
	mCorrespondingTokenTypes[LESSEQUAL_STATE] = LESSEQUAL_TOKEN;
	mCorrespondingTokenTypes[GREATER_STATE] = GREATER_TOKEN;
	mCorrespondingTokenTypes[GREATEREQUAL_STATE] = GREATEREQUAL_TOKEN;
	mCorrespondingTokenTypes[TIMES_STATE] = TIMES_TOKEN;
	mCorrespondingTokenTypes[MINUS_STATE] = MINUS_TOKEN;
	mCorrespondingTokenTypes[DIVIDE_STATE] = DIVIDE_TOKEN;
	mCorrespondingTokenTypes[IDENTIFIER_STATE] = IDENTIFIER_TOKEN;
	mCorrespondingTokenTypes[INTEGER_STATE] = INTEGER_TOKEN;	mCorrespondingTokenTypes[LESS_STATE] = LESS_TOKEN;
	mCorrespondingTokenTypes[INSERTION_STATE] = INSERTION_TOKEN;
	mCorrespondingTokenTypes[EQUAL_STATE] = EQUAL_TOKEN;
	mCorrespondingTokenTypes[NOTEQUAL_STATE] = NOTEQUAL_TOKEN;
	mCorrespondingTokenTypes[PLUS_STATE] = PLUS_TOKEN;
	mCorrespondingTokenTypes[LPAREN_STATE] = LPAREN_TOKEN;
	mCorrespondingTokenTypes[RPAREN_STATE] = RPAREN_TOKEN;
	mCorrespondingTokenTypes[SEMICOLON_STATE] = SEMICOLON_TOKEN;
	mCorrespondingTokenTypes[LCURLY_STATE] = LCURLY_TOKEN;
	mCorrespondingTokenTypes[RCURLY_STATE] = RCURLY_TOKEN;
	mCorrespondingTokenTypes[ASSIGNMENT_STATE] = ASSIGNMENT_TOKEN;
	mCorrespondingTokenTypes[AND_STATE] = AND;
	mCorrespondingTokenTypes[OR_STATE] = OR;
	mCorrespondingTokenTypes[EOF_STATE] = EOF_TOKEN;
}

MachineState StateMachineClass::UpdateState(char currentCharacter, TokenType& correspondingTokenType)
{
	CharacterType charType = BAD_CHAR;
	if (isdigit(currentCharacter)) charType = DIGIT_CHAR;
	if (isalpha(currentCharacter)) charType = LETTER_CHAR;
	if (isspace(currentCharacter)) { 
		if(currentCharacter != '\n') charType = WHITESPACE_CHAR;
	}
	if (currentCharacter == '+') charType = PLUS_CHAR;	if (currentCharacter == '-') charType = MINUS_CHAR;	if (currentCharacter == '*') charType = TIMES_CHAR;	if (currentCharacter == '/') charType = DIVIDE_CHAR;	if (currentCharacter == '<') charType = LESS_CHAR;
	if (currentCharacter == '=') charType = EQUAL_CHAR;
	if (currentCharacter == ';') charType = SEMICOLON_CHAR;
	if (currentCharacter == '(') charType = LPAREN_CHAR;
	if (currentCharacter == ')') charType = RPAREN_CHAR;
	if (currentCharacter == '{') charType = LCURLY_CHAR;
	if (currentCharacter == '}') charType = RCURLY_CHAR;
	if (currentCharacter == '&') charType = AND_CHAR;
	if (currentCharacter == '|') charType = OR_CHAR;
	if (currentCharacter == '\n') charType = NEWLINE_CHAR;
	if (currentCharacter == EOF) charType = EOF_CHAR;
	correspondingTokenType = mCorrespondingTokenTypes[mCurrentState];
	mCurrentState = mLegalMoves[mCurrentState][charType];
	return mCurrentState;
}
